// Mocks generated by Mockito 5.4.6 from annotations
// in vpn_case_study/test/bloc/connection_status_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:vpn_case_study/feature/home/data/models/connection_stats.dart'
    as _i2;
import 'package:vpn_case_study/feature/home/data/models/country.dart' as _i5;
import 'package:vpn_case_study/feature/home/data/repositories/vpn_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConnectionStats_0 extends _i1.SmartFake
    implements _i2.ConnectionStats {
  _FakeConnectionStats_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [VpnRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVpnRepository extends _i1.Mock implements _i3.VpnRepository {
  MockVpnRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Country>> getAllCountries() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCountries, []),
            returnValue: _i4.Future<List<_i5.Country>>.value(<_i5.Country>[]),
          )
          as _i4.Future<List<_i5.Country>>);

  @override
  _i4.Future<void> connectToCountry(_i5.Country? country) =>
      (super.noSuchMethod(
            Invocation.method(#connectToCountry, [country]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> disconnect() =>
      (super.noSuchMethod(
            Invocation.method(#disconnect, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<_i2.ConnectionStats> getConnectionStatsStream() =>
      (super.noSuchMethod(
            Invocation.method(#getConnectionStatsStream, []),
            returnValue: _i4.Stream<_i2.ConnectionStats>.empty(),
          )
          as _i4.Stream<_i2.ConnectionStats>);

  @override
  _i2.ConnectionStats getCurrentStats() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentStats, []),
            returnValue: _FakeConnectionStats_0(
              this,
              Invocation.method(#getCurrentStats, []),
            ),
          )
          as _i2.ConnectionStats);
}
